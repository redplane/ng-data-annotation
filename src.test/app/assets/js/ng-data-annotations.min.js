var ngDataAnnotations=angular.module('ngDataAnnotations',[]);ngDataAnnotations.directive('timePropertyCompares',function(){isDateComparisionValid=function(source,target,operator){switch(operator){case '<':return source<target;case '<=':return source<=target;case '=':return source==target;case '>=':return source>=target;case '>':return source>target;case '!=':return source!=target;default:throw 'Invalid operator'}};return{require:'ngModel',link:function(scope,element,attribute,ngModel){var properties=attribute.timePropertyCompares.split('.');var comparisionOperator=attribute.timePropertyComparesOperator;scope.$watch(attribute.timePropertyCompares,function(){var propertiesList=properties;var date=new Date(ngModel.$viewValue);var targetDate=ngModel.$$scope;for(var index=0;index<propertiesList.length;index++)
    targetDate=targetDate[propertiesList[index]];ngModel.$setValidity('timePropertyCompares',isDateComparisionValid(date,targetDate,comparisionOperator))});ngModel.$parsers.unshift(function(value){var propertiesList=properties;var date=new Date(value);var targetDate=ngModel.$$scope;for(var index=0;index<propertiesList.length;index++)
    targetDate=targetDate[propertiesList[index]];ngModel.$setValidity('timePropertyCompares',isDateComparisionValid(date,targetDate,comparisionOperator));return value});ngModel.$formatters.unshift(function(value){var propertiesList=properties;var targetDate=ngModel.$$scope;for(var index=0;index<propertiesList.length;index++)
    targetDate=targetDate[propertiesList[index]];var date=new Date(value);ngModel.$setValidity('timePropertyCompares',isDateComparisionValid(date,targetDate,comparisionOperator));return value})}}});ngDataAnnotations.directive('textPropertyCompares',function(){isTextComparisionValid=function(source,target,operator){switch(operator){case '<':return source<target;case '<=':return source<=target;case '=':return source==target;case '>=':return source>=target;case '>':return source>target;case '==':return source===target;default:throw 'Invalid operator'}};return{require:'ngModel',link:function(scope,element,attribute,ngModel){var properties=attribute.textPropertyCompares.split('.');var comparisionOperator=attribute.textPropertyComparesOperator;scope.$watch(attribute.textPropertyCompares,function(){var propertiesList=properties;var txtSource=ngModel.$viewValue;var txtTargetProperty=ngModel.$$scope;for(var index=0;index<propertiesList.length;index++)
    txtTargetProperty=txtTargetProperty[propertiesList[index]];ngModel.$setValidity('textPropertyCompares',isTextComparisionValid(txtSource,txtTargetProperty,comparisionOperator))});ngModel.$parsers.unshift(function(value){var propertiesList=properties;var txtTarget=ngModel.$$scope;for(var index=0;index<propertiesList.length;index++)
    txtTarget=txtTarget[propertiesList[index]];ngModel.$setValidity('textPropertyCompares',isTextComparisionValid(value,txtTarget,comparisionOperator));return value});ngModel.$formatters.unshift(function(value){var propertiesList=properties;var txtTarget=ngModel.$$scope;for(var index=0;index<propertiesList.length;index++)
    txtTarget=txtTarget[propertiesList[index]];ngModel.$setValidity('textPropertyCompares',isTextComparisionValid(value,txtTarget,comparisionOperator));return value})}}});ngDataAnnotations.directive('numericPropertyCompares',function(){isNumericPropertyCompareValid=function(source,target,operator,range,mathematicOperator){var flTarget=target;if(range!=null){switch(mathematicOperator){case '+':flTarget+=range;break;case '-':flTarget-=range;break;case '*':flTarget*=range;break;case '/':flTarget/=range;break}}
    switch(operator){case '<':return source<flTarget;case '<=':return source<=flTarget;case '=':return source==flTarget;case '>=':return source>=flTarget;case '>':return source>flTarget;case '==':return source===flTarget;case '!=':return source!=flTarget;default:throw 'Invalid operator'}};return{require:'ngModel',link:function(scope,element,attribute,ngModel){var properties=attribute.numericPropertyCompares.split('.');var comparisionOperator=attribute.numericPropertyComparesOperator;var flRange=attribute.numericPropertyComparesMathematicRange;var mathematicOperator=attribute.numericPropertyComparesMathematicOperator;scope.$watch(attribute.numericPropertyCompares,function(){var propertiesList=properties;var flSource=ngModel.$viewValue;var flTargetProperty=ngModel.$$scope;for(var index=0;index<propertiesList.length;index++)
    flTargetProperty=flTargetProperty[propertiesList[index]];ngModel.$setValidity('numericPropertyCompares',isNumericPropertyCompareValid(flSource,flTargetProperty,comparisionOperator,flRange,mathematicOperator))});ngModel.$parsers.unshift(function(value){var propertiesList=properties;var flTargetProperty=ngModel.$$scope;for(var index=0;index<propertiesList.length;index++)
    flTargetProperty=flTargetProperty[propertiesList[index]];ngModel.$setValidity('numericPropertyCompares',isNumericPropertyCompareValid(value,flTargetProperty,comparisionOperator,flRange,mathematicOperator));return value});ngModel.$formatters.unshift(function(value){var propertiesList=properties;var flTargetProperty=ngModel.$$scope;for(var index=0;index<propertiesList.length;index++)
    flTargetProperty=flTargetProperty[propertiesList[index]];ngModel.$setValidity('numericPropertyCompare',isNumericPropertyCompareValid(value,flTargetProperty,comparisionOperator,flRange,mathematicOperator));return value})}}});ngDataAnnotations.directive('textPropertyContains',function(){isTextContainValid=function(source,target,caseInsensitive,operator,result){var txtSource=source;var txtTarget=target;if(caseInsensitive=='true'){txtSource=source.toLowerCase();txtTarget=target.toLowerCase()}
    if(result==null)
        result=-1;if(operator==null)
        operator='!=';switch(operator){case '<':return txtSource.indexOf(txtTarget)<result;case '<=':return txtSource.indexOf(txtTarget)<=result;case '=':return txtSource.indexOf(txtTarget)==result;case '>=':return txtSource.indexOf(txtTarget)>=result;case '>':return txtSource.indexOf(txtTarget)>result;case '!=':return txtSource.indexOf(txtTarget)!=result;default:throw 'Operator '+operator+' is invalid. Please check'}};return{require:'ngModel',link:function(scope,element,attribute,ngModel){var properties=attribute.textPropertyContains.split('.');var isCaseInsensitive=attribute.textPropertyContainsCaseInsensitive;if(isCaseInsensitive==null)
    isCaseInsensitive=!1;var result=attribute.textPropertyContainsResult;var comparisionOperator=attribute.textPropertyContainsOperator;scope.$watch(attribute.textPropertyContains,function(){var propertiesList=properties;var txtSource=ngModel.$viewValue;var txtTargetProperty=ngModel.$$scope;for(var index=0;index<propertiesList.length;index++)
    txtTargetProperty=txtTargetProperty[propertiesList[index]];ngModel.$setValidity('textPropertyContains',isTextContainValid(txtSource,txtTargetProperty,isCaseInsensitive,comparisionOperator,result))});ngModel.$parsers.unshift(function(value){var propertiesList=properties;var txtTarget=ngModel.$$scope;for(var index=0;index<propertiesList.length;index++)
    txtTarget=txtTarget[propertiesList[index]];ngModel.$setValidity('textPropertyContains',isTextContainValid(value,txtTarget,isCaseInsensitive,comparisionOperator,result));return value});ngModel.$formatters.unshift(function(value){var propertiesList=properties;var txtTarget=ngModel.$$scope;for(var index=0;index<propertiesList.length;index++)
    txtTarget=txtTarget[propertiesList[index]];ngModel.$setValidity('textPropertyContains',isTextContainValid(value,txtTarget,isCaseInsensitive,comparisionOperator,result));return value})}}});ngDataAnnotations.directive('ngFunctionValidate',function(){return{require:'ngModel',link:function(scope,element,attribute,ngModel){var txtFunctionsList=attribute.ngFunctionValidate;if(txtFunctionsList==null||txtFunctionsList.length<1)
    throw 'Validate functions should be specified.';var functionsList=txtFunctionsList.split(';');if(functionsList==null||functionsList.length<1)
    throw 'Validate functions should be specified';var txtMonitoredModels=attribute.ngFunctionValidateMonitors;var monitoredModels=[];monitoredModels.push(ngModel.$$attr.ngModel);if(txtMonitoredModels!=null){monitoredModels=monitoredModels.concat(txtMonitoredModels.split(';'))}
    for(var propertyIndex=0;propertyIndex<monitoredModels.length;propertyIndex++){var modelName=monitoredModels[propertyIndex];scope.$watch(modelName,function(){for(var index=0;index<functionsList.length;index++){var validatorPropertyName='ng-function-validate-'+functionsList[index];var validatePropertyInfo=element.attr(validatorPropertyName);if(validatePropertyInfo==null||validatePropertyInfo.length<1)
        throw validatorPropertyName+' doesn\'t exist in tag. Please check !';var calculationResult=scope.$eval(element.attr(validatorPropertyName));ngModel.$setValidity(validatorPropertyName,calculationResult)}})}}}})