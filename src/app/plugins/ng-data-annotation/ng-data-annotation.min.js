var ngDataAnnotations=angular.module("ngDataAnnotations",[]);ngDataAnnotations.directive("timePropertyCompares",function(){return isDateComparisionValid=function(t,e,r){switch(r){case"<":return e>t;case"<=":return e>=t;case"=":return t==e;case">=":return t>=e;case">":return t>e;case"!=":return t!=e;default:throw"Invalid operator"}},{require:"ngModel",link:function(t,e,r,n){var i=r.timePropertyCompares.split("."),a=r.timePropertyComparesOperator;t.$watch(r.timePropertyCompares,function(){for(var t=i,e=new Date(n.$viewValue),r=n.$$scope,o=0;o<t.length;o++)r=r[t[o]];n.$setValidity("timePropertyCompares",isDateComparisionValid(e,r,a))}),n.$parsers.unshift(function(t){for(var e=i,r=new Date(t),o=n.$$scope,s=0;s<e.length;s++)o=o[e[s]];return n.$setValidity("timePropertyCompares",isDateComparisionValid(r,o,a)),t}),n.$formatters.unshift(function(t){for(var e=i,r=n.$$scope,o=0;o<e.length;o++)r=r[e[o]];var s=new Date(t);return n.$setValidity("timePropertyCompares",isDateComparisionValid(s,r,a)),t})}}}),ngDataAnnotations.directive("textPropertyCompares",function(){return isTextComparisionValid=function(t,e,r){switch(r){case"<":return e>t;case"<=":return e>=t;case"=":return t==e;case">=":return t>=e;case">":return t>e;case"==":return t===e;default:throw"Invalid operator"}},{require:"ngModel",link:function(t,e,r,n){var i=r.textPropertyCompares.split("."),a=r.textPropertyComparesOperator;t.$watch(r.textPropertyCompares,function(){for(var t=i,e=n.$viewValue,r=n.$$scope,o=0;o<t.length;o++)r=r[t[o]];n.$setValidity("textPropertyCompares",isTextComparisionValid(e,r,a))}),n.$parsers.unshift(function(t){for(var e=i,r=n.$$scope,o=0;o<e.length;o++)r=r[e[o]];return n.$setValidity("textPropertyCompares",isTextComparisionValid(t,r,a)),t}),n.$formatters.unshift(function(t){for(var e=i,r=n.$$scope,o=0;o<e.length;o++)r=r[e[o]];return n.$setValidity("textPropertyCompares",isTextComparisionValid(t,r,a)),t})}}}),ngDataAnnotations.directive("textPropertyContains",function(){return isTextContainValid=function(t,e,r,n,i){var a=t,o=e;switch("true"==r&&(a=t.toLowerCase(),o=e.toLowerCase()),null==i&&(i=-1),null==n&&(n="!="),n){case"<":return a.indexOf(o)<i;case"<=":return a.indexOf(o)<=i;case"=":return a.indexOf(o)==i;case">=":return a.indexOf(o)>=i;case">":return a.indexOf(o)>i;case"!=":return a.indexOf(o)!=i;default:throw"Operator "+n+" is invalid. Please check"}},{require:"ngModel",link:function(t,e,r,n){var i=r.textPropertyContains.split("."),a=r.textPropertyContainsCaseInsensitive;null==a&&(a=!1);var o=r.textPropertyContainsResult,s=r.textPropertyContainsComparisionOperator;t.$watch(r.textPropertyContains,function(){for(var t=i,e=n.$viewValue,r=n.$$scope,l=0;l<t.length;l++)r=r[t[l]];n.$setValidity("textPropertyContains",isTextContainValid(e,r,a,s,o))}),n.$parsers.unshift(function(t){for(var e=i,r=n.$$scope,l=0;l<e.length;l++)r=r[e[l]];return n.$setValidity("textPropertyContains",isTextContainValid(t,r,a,s,o)),t}),n.$formatters.unshift(function(t){for(var e=i,r=n.$$scope,l=0;l<e.length;l++)r=r[e[l]];return n.$setValidity("textPropertyContains",isTextContainValid(t,r,a,s,o)),t})}}}),ngDataAnnotations.directive("ngFunctionValidate",function(){return{require:"ngModel",link:function(t,e,r,n){var i=r.ngFunctionValidate;if(null==i||i.length<1)throw"Validate functions should be specified.";var a=i.split(";");if(null==a||a.length<1)throw"Validate functions should be specified";var o=r.ngFunctionValidateMonitors,s=[];s.push(n.$$attr.ngModel),null!=o&&(s=s.concat(o.split(";")));for(var l=0;l<s.length;l++){var u=s[l];t.$watch(u,function(){for(var r=0;r<a.length;r++){var i="ng-function-validate-"+a[r],o=e.attr(i);if(null==o||o.length<1)throw i+" doesn't exist in tag. Please check !";var s=t.$eval(e.attr(i));n.$setValidity(i,s)}})}}}});